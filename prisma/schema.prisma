generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id            String @id @default(uuid())
  key           String @unique
  name          String
  books         Book[]
  characters    Character[]
}

model Book {
  id            String @id @default(uuid())
  userId        String
  userName      String
  src           String
  title         String @db.Text
  description   String
  levelMin      String @db.Text
  levelMax      String @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String

  chapters      Chapter[]
  chapterMax    Int

  @@index([categoryId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String   @db.Text
  content     String
  src         String
  order       String

  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      String

  messages    Message[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([bookId])
}

enum Role {
  user
  system
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String
  userId      String

  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String

  actions    Action[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([chapterId])
}

model Action {
  id            String    @id @default(uuid())
  type          String
  description   String

  message       Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId     String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([messageId])
}

model Character {
  id          String    @id @default(uuid())
  name        String    @db.Text
  description String    @db.Text

  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([categoryId])
}

model UserSubscription {
  id                        String    @id @default(cuid())
  userId                    String    @unique
  stripeCustomerId          String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId      String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId             String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd    DateTime? @map(name: "stripe_current_period_end")
}