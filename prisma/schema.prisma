generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  user
  system
}

model Category {
  id            String @id @default(uuid())
  key           String @unique
  name          String
  books         Book[]
}

model Book {
  id            String @id @default(uuid())
  userId        String
  userName      String
  src           String
  title         String @db.Text
  description   String
  levelMin      String @db.Text
  levelMax      String @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String

  chapters      Chapter[]
  chapterMax    Int

  messages      Message[]

  characters    Character[]

  @@index([categoryId])
  @@index([userId])
}

model Chapter {
  id          String   @id @default(uuid())
  userId      String
  title       String   @db.Text
  content     Json
  src         String
  order       String

  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([bookId])
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String
  userId      String
  fragmentId  String

  book        Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([bookId])
}

model Character {
  id          String    @id @default(uuid())
  userId      String
  name        String    @db.Text
  species     String
  class       String
  src         String
  level       String    
  background  String    @db.Text
  
  initiative  String
  armorClass  String
  hitPoints   String
  speed       String
  
  strength     String
  dexterity    String
  constitution String
  intelligence String
  wisdom       String
  charisma     String

  skills      String
  senses      String
  languages   String
  
  traits      String
  actions     String
  
  categoryId  String    @default("characters")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  books       Book[]

  @@index([categoryId])
  @@index([userId])
}

model UserSubscription {
  id                        String    @id @default(cuid())
  userId                    String    @unique
  stripeCustomerId          String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId      String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId             String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd    DateTime? @map(name: "stripe_current_period_end")
}